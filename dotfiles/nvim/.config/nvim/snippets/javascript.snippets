# Functions

# Function
snippet fun "function"
	function ${1:function_name}(${2}) {
		${0}
	}
# Asynchronous Function
snippet asf "async function"
	async function ${1:function_name}(${2}) {
		${0}
	}

# Flow control

# if
snippet if "if (condition) { ... }"
	if (${1:true}) {
		${0}
	}
# if ... else
snippet ife "if (condition) { ... } else { ... }"
	if (${1:true}) {
		${0}
	} else {
		${2}
	}
# switch
snippet switch
	switch (${1:expression}) {
		case '${3:case}':
			${4}
			break;
		${0}
		default:
			${2}
	}
snippet case "case 'xyz': ... break"
	case '${1:case}':
		${0}
		break;
snippet try "try { ... } catch(e) { ... }"
	try {
		${0}
	} catch (${1:e}) {
		${2:/* handle error */}
	}
snippet tryf "try { ... } catch(e) { ... } finally { ... }"
	try {
		${0}
	} catch (${1:e}) {
		${2:/* handle error */}
	} finally {
		${3:/* be executed regardless of the try / catch result*/}
	}
# throw Error
snippet terr
	throw new Error('${1:error message}')
# return
snippet ret
	return ${0:result};
snippet for "for (...) {...}"
	for (var ${1:i} = 0, ${2:len} = ${3:Things.length}; $1 < $2; $1++) {
		${0}
	}
snippet wh "(condition) { ... }"
	while (${1:/* condition */}) {
		${0}
	}
snippet do "do { ... } while (condition)"
	do {
		${0}
	} while (${1:/* condition */});
# For in loop
snippet fori
	for (var ${1:prop} in ${2:object}) {
		${0:$2[$1]}
	}

# Documentation

# docstring
snippet /**
	/**
	 * ${0:description}
	 *
	 */

# JSON.parse
snippet jsonp
	JSON.parse(${0:jstr});
# JSON.stringify
snippet jsons
	JSON.stringify(${0:object});

# Debugging

snippet de
	debugger;
snippet cl "console.log"
	console.log(${0});
snippet cd "console.debug"
	console.debug(${0});
snippet ce "console.error"
	console.error(${0});
snippet cw "console.warn"
	console.warn(${0});
snippet ci "console.info"
	console.info(${0});
snippet ct "console.trace"
	console.trace(${0:label});

# Misc
snippet us
	'use strict';
snippet const
	const ${1} = ${0};
snippet let
	let ${1} = ${0};
snippet im "import xyz from 'xyz'"
	import ${1} from '${2:$1}';
snippet imas "import * as xyz from 'xyz'"
	import * as ${1} from '${2:$1}';
snippet imm "import { member } from 'xyz'"
	import { ${1} } from '${2}';
snippet cla
	class ${1} {
		${0}
	}
snippet clax
	class ${1} extends ${2} {
		${0}
	}
snippet clac
	class ${1} {
		constructor(${2}) {
			${0}
		}
	}
snippet foro "for (const prop of object}) { ... }"
	for (const ${1:prop} of ${2:object}) {
		${0:$1}
	}
snippet fun*
	function* ${1:function_name}(${2}) {
		${0}
	}
snippet c=>
	const ${1:function_name} = (${2}) => {
		${0}
	}
snippet caf
	const ${1:function_name} = (${2}) => {
		${0}
	}
snippet =>
	(${1}) => {
		${0}
	}
snippet af "() =>"
	(${1}) => ${0}
snippet afb "() => {}"
	(${1}) => {
		${0}
	}
snippet ed
	export default ${0}
snippet ${
	${${1}}${0}
snippet aw "await"
	await ${0}

# Mocha

snippet cont "context('name', () => { ... })" b
	context('${1:}', () => {
		${0}
	});
snippet desc "describe('name', () => { ... })" b
	describe('${1:}', () => {
		${0}
	});
snippet it "it('name', () => { ... })" b
	it('${1:}', () => {
		${0}
	});
snippet bef "beforeEach(() => { ... })" b
	beforeEach(() => {
		${0}
	});
snippet aft "afterEach(() => { ... })" b
	afterEach(() => {
		${0}
	});
snippet exp "expect(...)" b
	expect(${1:})${0};
