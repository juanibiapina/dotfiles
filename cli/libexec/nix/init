#!/usr/bin/env bash
#
# Summary: Prepare a project for compiling with nix
#
# Usage: {cmd}

set -e

# Initialize niv
# `niv init` is idempotent, but `niv add` is not, so this check is needed in
# order to configure everything at once
if [ ! -e "nix" ]; then
  niv init --latest

  # Add nixpkgs-ruby if a Gemfile exists
  if [ -e "Gemfile" ]; then
    niv add juanibiapina/nixpkgs-ruby
  fi
fi


# Create shell.nix
if [ ! -e "shell.nix" ]; then
  if [ -e "Gemfile" ]; then
    cat <<FILE_SHELLNIX > shell.nix
{
  sources ? import ./nix/sources.nix,
  pkgs ? import sources.nixpkgs {
    overlays = [
      (_: _: { inherit sources; })
      (import sources.nixpkgs-ruby)
    ];
  },
}:

let
  ruby_package = pkgs.parseRubyVersionFile {};
in
pkgs.mkShell {
  nativeBuildInputs = with pkgs; [
    pkgs.\${ruby_package}
  ];
  shellHook = ''
    # install gems locally
    mkdir -p .local/nix-gems
    export GEM_HOME=\$PWD/.local/nix-gems
    export GEM_PATH=\$GEM_HOME
    export PATH=\$GEM_HOME/bin:\$PATH

    # add local bin directory to path
    export PATH=\$PWD/bin:\$PATH
  '';
}
FILE_SHELLNIX
  else
    cat <<FILE_SHELLNIX > shell.nix
{
  sources ? import ./nix/sources.nix,
  pkgs ? import sources.nixpkgs {},
}:

pkgs.mkShell {
  nativeBuildInputs = with pkgs; [
  ];
}
FILE_SHELLNIX
  fi
fi

# Create direnv configuration
if [ ! -e ".envrc" ]; then
  echo use nix > .envrc
  direnv allow
fi
