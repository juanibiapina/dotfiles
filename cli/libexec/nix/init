#!/usr/bin/env bash
#
# Summary: Prepare a project for compiling with nix
#
# Usage: {cmd}

set -e

# Create shell.nix
if [ ! -e "shell.nix" ]; then
  if [ -e "Gemfile" ]; then
    cat <<FILE_SHELLNIX > shell.nix
{ pkgs ? import <nixpkgs> {} }:

let
  pwd = builtins.getEnv "PWD";
  ruby_version_string = builtins.readFile (pwd + "/.ruby-version");
  ruby_version_parts = builtins.match "([0-9]*)\.([0-9]*)\..*" ruby_version_string;
  ruby_package = builtins.concatStringsSep "_" (["ruby"] ++ ruby_version_parts);
in
pkgs.mkShell {
  nativeBuildInputs = with pkgs; [
    pkgs.\${ruby_package}
  ];
  shellHook = ''
    # install gems locally
    mkdir -p .local/nix-gems
    export GEM_HOME=\$PWD/.local/nix-gems
    export GEM_PATH=\$GEM_HOME
    export PATH=\$GEM_HOME/bin:\$PATH

    # add local bin directory to path
    export PATH=\$PWD/bin:\$PATH
  '';
}
FILE_SHELLNIX
  else
    cat <<FILE_SHELLNIX > shell.nix
{ pkgs ? import <nixpkgs> {} }:

pkgs.mkShell {
  nativeBuildInputs = with pkgs; [
  ];
}
FILE_SHELLNIX
  fi
fi

# Create direnv configuration
if [ ! -e ".envrc" ]; then
  echo use nix > .envrc
  direnv allow
fi
