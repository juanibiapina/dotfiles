#!/usr/bin/env ruby
#
# Summary: Run a shell command as plain text using OpenAI API
#
# Usage: {cmd} <intent>
#
# <intent> is a plain text description of what you want to do. For example:
#
#   "list files in current directory"
#
# OpenAI API will generate a few shell commands and ask you to choose one to run.

require 'erb'
require 'json'
require 'net/http'

# read task as a string from all command line arguments
task = ARGV.join(" ")

# contains methods to be used from the ERB template
class Repository
  attr_reader :task

  def initialize(task)
    @task = task
  end

  def context
    {
      files: Dir.entries(".") - [".", ".."],
    }.to_json
  end

  def get_binding
    binding
  end
end

# parse prompts/shell.txt.erb to a string using ERB
template = ERB.new(File.read(File.join(ENV["_DEV_ROOT"], "prompts/shell.txt.erb")))
prompt = template.result(Repository.new(task).get_binding)

# call the OpenAI completions API with the prompt
response = Net::HTTP.post(
  URI("https://api.openai.com/v1/completions"),
  {
    prompt: prompt,
    temperature: 0,
    max_tokens: 500,
    model: "text-davinci-003",
  }.to_json,
  {
    "Content-Type" => "application/json",
    "Authorization" => "Bearer #{ENV["OPENAI_API_KEY"]}",
  },
)

# parse response body
body = JSON.parse(response.body).dig("choices", 0, "text")
result = JSON.parse(body)

# display each command in the result hash and ask the user which one to run by index
result["commands"].each_with_index do |command, index|
  puts "#{index}: #{command}"
end

puts "Which command to run? (index)"
index = STDIN.gets.chomp.to_i
command = result["commands"][index]
puts

# run command
system(command)
