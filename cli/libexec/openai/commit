#!/usr/bin/env ruby
#
# Summary: Commit currently staged files with a commit message from OpenAI API
#
# Usage: {cmd} [title]...
#
# A diff is always included. If <title> is passed, it will be used as reference
# for the commit purpose but may be rewritten.
#
# Commit messages generated by this tool are often helpful as a summary of the
# changes made. It's recommended to use this tool as a starting point for
# writing a commit message but make sure to include "why" the change is made.

require 'erb'
require 'json'
require 'net/http'

# contains methods to be used from the ERB template
class Repository
  attr_reader :title, :diff

  def initialize(title, diff)
    @title = title
    @diff = diff
  end

  def get_binding
    binding
  end
end

# get title from command line arguments
title = ARGV.join(" ")

# calculate diff
diff = `git diff --cached`

# parse prompt template to a string using ERB
template = ERB.new(File.read(File.join(ENV["_DEV_ROOT"], "prompts/commit.txt.erb")))
prompt = template.result(Repository.new(title, diff).get_binding)

# call the OpenAI completions API with the prompt
response = Net::HTTP.post(
  URI("https://api.openai.com/v1/completions"),
  {
    prompt: prompt,
    temperature: 0,
    max_tokens: 500,
    model: "text-davinci-003",
  }.to_json,
  {
    "Content-Type" => "application/json",
    "Authorization" => "Bearer #{ENV["OPENAI_API_KEY"]}",
  },
)

# parse diff explanation from response
body = JSON.parse(response.body).dig("choices", 0, "text")

# commit with the diff explanation
system("git commit --edit -m \"#{body}\"")
