#!/usr/bin/env bash
#
# Summary: Remove local repositories that are archived on GitHub
#
# Usage: {cmd} <user>

set -euo pipefail

# Parse arguments
declare -A args="($_DEV_ARGS)"
user="${args[user]}"

# Go to the workspace directory for the user
cd "$WORKSPACE/$user"

# Get all archived repositories via GitHub API (with pagination)
archived_repos=()
per_page=100
page=1

while :; do
  response=$(gh api "/users/$user/repos" \
    --paginate -q '.[] | select(.archived == true) | .name')

  if [[ -z "$response" ]]; then
    break
  fi

  while IFS= read -r name; do
    archived_repos+=("$name")
  done <<< "$response"

  break  # `--paginate` fetches all pages, so break after first run
done

# Filter only repos that exist locally
repos_to_remove=()
for repo in "${archived_repos[@]}"; do
  [[ -d "$repo" ]] && repos_to_remove+=("$repo")
done

if [[ ${#repos_to_remove[@]} -eq 0 ]]; then
  echo "No local directories match archived repositories for user $user."
  exit 0
fi

echo "The following archived repositories exist locally and will be removed:"
for repo in "${repos_to_remove[@]}"; do
  echo "$repo"
done

read -p "Are you sure you want to delete these repositories locally? (y/N): " confirm
if [[ "$confirm" =~ ^[Yy]$ ]]; then
  for repo in "${repos_to_remove[@]}"; do
    echo "Removing $repo..."
    rm -rf "$repo"
  done
  echo "Archived repositories removed."
else
  echo "Operation cancelled."
fi
